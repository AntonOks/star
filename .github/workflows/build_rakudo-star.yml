# This is a basic workflow to help you get started with Actions

name: Build Rakudo Star Releases (Windows MSI and Linux RSTAR source)

# Create triggers the workflow on new tag's or branches
on:
  create: #[push, create, workflow_dispatch]
    tags:
    - 2[0-9]+.[0-1][0-1]'**'
  workflow_dispatch:

jobs:
  build_Rakudo-Star_Windows_MSI_package:
    # Windows-latest has almost all requirements to build rakudo-star-win
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/2')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup VS Dev Environment
        uses: seanmiddleditch/gha-setup-vsdevenv@v3
      - name: Run the build-with-choco.ps1 script
        run: pwsh -command ".\$GITHUB_WORKSPACE\tools\build\binary-release\Windows\build-with-choco.ps1"
      - name: List my stuff
        run: |
          Get-ChildItem -Exclude ".git" -Recurse
      - name: Upload Rakudo-Star Windows artifacts
        uses: actions/upload-artifact@v2
        with:
          name: output
          path: tools/build/binary-release/Windows/*
          if-no-files-found: error
          
  build_Rakudo-Star_Linux_source:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/2')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Prepare
        run: |
          sudo apt update
          sudo apt install -y cpanminus curl gcc make
          cpanm -v ExtUtils::Command Pod::Usage
      - name: Collect RSTAR System Informations
        env:
          RSTAR_DEBUG: "1"
        run: ./bin/rstar sysinfo
      - name: Fetch RSTAR Components
        run: ./bin/rstar fetch -l
      - name: Create RSTAR Distrubution
        run: ./bin/rstar dist
      - name: List my stuff
        run: |
          ls -lAR -I ".git" -I "src"
      - name: Upload Rakudo-Star Linux artifacts
        uses: actions/upload-artifact@v2
        with:
          name: output
          path: dist/*
          if-no-files-found: error
      
  release_Rakudo-Star_artifacts:
    needs: [build_Rakudo-Star_Windows_MSI_package, build_Rakudo-Star_Linux_source]
    runs-on: ubuntu-latest
    steps:
    - name: Get the TAG out of the GitHub refs
      id: get-tag
      run: |
        echo ::set-output name=MYTAG::$(basename ${{ github.ref }} )
        echo "my found release tag is ${{ steps.get-tag.outputs.MYTAG }}"
    - uses: actions/download-artifact@v2
      with:
        path: Rakudo-Star_artifacts
    - name: List my stuff
      run: |
        ls -lAR
    - name: Craete the SHA256 checksum file
      run: |
        cat Rakudo-Star_artifacts/output/Windows/rakudo-star-2022.02-win-x86_64-msvc.msi.sha256.txt > Rakudo-Star_artifacts/output/sha256.checksums.txt
        cat Rakudo-Star_artifacts/output/rakudo-star-2022.02.tar.gz.sha256.checksum.txt >> Rakudo-Star_artifacts/output/sha256.checksums.txt
    - name: Release Rakudo-Star Windows MSI and Linux RSTAR releases
      uses: ncipollo/release-action@v1
      with:
        # ncipollo/release-action needs a tag! Either a usual "GIT TAG" or an dedicated TAG, see below!
        #tag: 2021.06 # set a TAG if you want a release to be build on GitHub _BUT_ do not provide a GIT TAG
        tag: ${{ steps.get-tag.outputs.MYTAG }}
        draft: true
        allowUpdates: true
        artifactErrorsFailBuild: true
        artifacts: "Rakudo-Star_artifacts/output/rakudo-star-*,Rakudo-Star_artifacts/output/Windows/rakudo-star-*,Rakudo-Star_artifacts/output/sha256.checksums.txt"
        token: ${{ secrets.GITHUB_TOKEN }}
        

